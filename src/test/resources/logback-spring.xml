<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，比如: 如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">
    <!--每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。-->
    <contextName>logback</contextName>
    <!--定义当前等级: TRACE, DEBUG, INFO, WARN, ERROR -->
    <property name="LOG_LEVEL" value="INFO"/>
    <!--定义字符集 -->
    <property name="LOG_CHARSET" value="UTF-8"/>
    <!--保存天数 -->
    <property name="LOG_SAVE_DAYS" value="15"/>
    <!--单文件大小-->
    <property name="LOG_MAX_FILE_SIZE" value="50MB"/>
    <!--日志文件大小上线，超过这个值，就会删除旧的日志-->
    <property name="LOG_TOTAL_SIZE_CAP" value="5GB"/>
    <!--定义日志的输出位置 -->
    <property name="LOG_PATH" value="${user.dir}/logs"/>
    <!--定义日志文件: %d{yyyy-MM-dd_HH_mm} -->
    <property name="LOG_DEBUG_FILE" value="${LOG_PATH}/debug/debug_%d{yyyy-MM-dd}_%i.log.zip"/>
    <property name="LOG_INFO_FILE" value="${LOG_PATH}/info/info_%d{yyyy-MM-dd}_%i.log.zip"/>
    <property name="LOG_WARN_FILE" value="${LOG_PATH}/warn/warn_%d{yyyy-MM-dd}_%i.log.zip"/>
    <property name="LOG_ERROR_FILE" value="${LOG_PATH}/error/error_%d{yyyy-MM-dd}_%i.log.zip"/>
    <property name="LOG_ALL_FILE" value="${LOG_PATH}/all/all_%d{yyyy-MM-dd}_%i.log.zip"/>

    <!--日志格式和颜色渲染 -->
    <!--彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!--彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%logger{100}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--文件日志展示的格式 -->
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n"/>

    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <!--定义当前等级: TRACE, DEBUG, INFO, WARN, ERROR -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
    </appender>

    <!--输出到文档-->
    <!--level为 DEBUG 日志，时间滚动输出  -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/debug.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 设置按每分钟的方式来生成文件，如果文件名是以.gz结尾的，那么就开启了日志压缩 -->
            <fileNamePattern>${LOG_DEBUG_FILE}</fileNamePattern>
            <!-- 单文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--日志文档保留天数-->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <!-- 日志文件大小上线，超过这个值，就会删除旧的日志 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 当文件大小超过 设置大小 也会进行压缩 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
        </rollingPolicy>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文档只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--level为 INFO 日志，时间滚动输出  -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/info.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${LOG_INFO_FILE}</fileNamePattern>
            <!-- 单文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--日志文档保留天数-->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <!-- 日志文件大小上线，超过这个值，就会删除旧的日志 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 当文件大小超过 设置大小 也会进行压缩 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
        </rollingPolicy>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文档只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- level为 WARN 日志，时间滚动输出  -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/warn.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_WARN_FILE}</fileNamePattern>
            <!-- 单文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!-- 日志文档保留天数-->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <!-- 日志文件大小上线，超过这个值，就会删除旧的日志 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 当文件大小超过 设置大小 也会进行压缩 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
        </rollingPolicy>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文档只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- level为 ERROR 日志，时间滚动输出  -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/error.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_ERROR_FILE}</fileNamePattern>
            <!-- 单文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!-- 日志文档保留天数-->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <!-- 日志文件大小上线，超过这个值，就会删除旧的日志 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 当文件大小超过 设置大小 也会进行压缩 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
        </rollingPolicy>
        <!-- 日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文档只记录ERROR级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 所有 除了DEBUG级别的其它高于DEBUG的 日志，记录到一个文件  -->
    <appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文档的路径及文档名 -->
        <file>${LOG_PATH}/all.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_ALL_FILE}</fileNamePattern>
            <!-- 单文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--日志文档保留天数-->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <!-- 日志文件大小上线，超过这个值，就会删除旧的日志 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
            <!-- 当文件大小超过 设置大小 也会进行压缩 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"/>
        </rollingPolicy>
        <!--日志文档输出格式-->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${LOG_CHARSET}</charset>
        </encoder>
        <!-- 此日志文档记录除了DEBUG级别的其它高于DEBUG的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
    -->
    <logger name="org.springframework.context.annotation" level="WARN"/>
    <logger name="org.springframework.boot.autoconfigure" level="WARN"/>
    <logger name="org.springframework.boot.availability" level="WARN"/>
    <logger name="org.springframework.boot.web.servlet" level="WARN"/>
    <logger name="org.springframework.aop.web.servlet" level="WARN"/>
    <logger name="org.springframework.beans.factory" level="WARN"/>
    <logger name="org.springframework.web.servlet" level="WARN"/>
    <logger name="_org.springframework.web.servlet" level="WARN"/>
    <logger name="org.springframework.context.support" level="WARN"/>
    <logger name="org.springframework.transaction.interceptor" level="WARN"/>
    <logger name="org.springframework.aop.aspectj.annotation" level="WARN"/>
    <logger name="org.springframework.jdbc.datasource" level="WARN"/>
    <logger name="org.mybatis.spring.transaction" level="WARN"/>
    <logger name="com.zaxxer.hikari" level="WARN"/>
    <logger name="org.mybatis.spring" level="WARN"/>
    <logger name="reactor" level="WARN"/>
    <logger name="io.github.yunbamboos" level="debug"/>
    <!-- 开发环境, 指定某包日志为debug级 -->
    <logger name="com" level="debug"/>

    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
        【logging.level.org.mybatis=debug logging.level.dao=debug】
     -->

    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEBUG_FILE"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="WARN_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
        <appender-ref ref="ALL_FILE"/>
    </root>

</configuration>